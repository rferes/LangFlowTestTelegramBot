{"data":{"edges":[],"nodes":[{"data":{"node":{"template":{"_type":"Component","data":{"tool_mode":false,"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The webhook data to parse.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\nfrom typing import Tuple\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Extract message text and chat ID from Telegram webhook data.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The webhook data to parse.\"),\n    ]\n    outputs = [\n        Output(display_name=\"Chat ID\", name=\"chat_id\", method=\"get_chat_id\"),\n        Output(display_name=\"Message Text\", name=\"message\", method=\"parse_data\")\n    ]\n\n    def _process_data(self) -> Tuple[str, int]:\n        \"\"\"Helper method to process data and extract message and chat_id\"\"\"\n        data = self.data if isinstance(self.data, list) else [self.data]\n        data_dict = data[0].model_dump()\n        \n        # Extract message and chat_id\n        message = data_dict['data']['message']['text']\n        chat_id = data_dict['data']['message']['chat']['id']\n        \n        return message, chat_id\n\n    def parse_data(self) -> Message:\n        \"\"\"Extract and return the message text\"\"\"\n        try:\n            message, _ = self._process_data()\n            self.status = \"Message successfully extracted\"\n            return Message(text=str(message))\n        except Exception as e:\n            self.status = f\"Error extracting message: {str(e)}\"\n            raise ValueError(f\"Failed to extract message: {str(e)}\")\n\n    def get_chat_id(self) -> Message:\n        \"\"\"Extract and return the chat ID\"\"\"\n        try:\n            _, chat_id = self._process_data()\n            self.status = \"Chat ID successfully extracted\"\n            return Message(text=str(chat_id))\n        except Exception as e:\n            self.status = f\"Error extracting chat ID: {str(e)}\"\n            raise ValueError(f\"Failed to extract chat ID: {str(e)}\")","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false}},"description":"Extract message text and chat ID from Telegram webhook data.","icon":"braces","base_classes":["Message"],"display_name":"Parse Telegram Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"chat_id","display_name":"Chat ID","method":"get_chat_id","value":"__UNDEFINED__","cache":true},{"types":["Message"],"selected":"Message","name":"message","display_name":"Message Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"official":false},"type":"ParseData","id":"ParseData-rCKVT"},"id":"ParseData-rCKVT","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Extract message text and chat ID from Telegram webhook data.","name":"Parse Telegram Data","id":"ParseData-rCKVT","is_component":true,"last_tested_version":"1.1.0"}